/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dihaitech.tserver.managercenter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-27")
public class Manager implements org.apache.thrift.TBase<Manager, Manager._Fields>, java.io.Serializable, Cloneable, Comparable<Manager> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Manager");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ename", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LOGINTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("logintime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LOGINIP_FIELD_DESC = new org.apache.thrift.protocol.TField("loginip", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ManagerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ManagerTupleSchemeFactory());
  }

  public int id; // required
  public String email; // required
  public String password; // required
  public String nickname; // required
  public String ename; // required
  public String logo; // required
  public int status; // required
  public int departmentId; // required
  public int positionId; // required
  public int roleId; // required
  public String creator; // required
  public String createtime; // required
  public String logintime; // required
  public String loginip; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    EMAIL((short)2, "email"),
    PASSWORD((short)3, "password"),
    NICKNAME((short)4, "nickname"),
    ENAME((short)5, "ename"),
    LOGO((short)6, "logo"),
    STATUS((short)7, "status"),
    DEPARTMENT_ID((short)8, "departmentId"),
    POSITION_ID((short)9, "positionId"),
    ROLE_ID((short)10, "roleId"),
    CREATOR((short)11, "creator"),
    CREATETIME((short)12, "createtime"),
    LOGINTIME((short)13, "logintime"),
    LOGINIP((short)14, "loginip");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // EMAIL
          return EMAIL;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // NICKNAME
          return NICKNAME;
        case 5: // ENAME
          return ENAME;
        case 6: // LOGO
          return LOGO;
        case 7: // STATUS
          return STATUS;
        case 8: // DEPARTMENT_ID
          return DEPARTMENT_ID;
        case 9: // POSITION_ID
          return POSITION_ID;
        case 10: // ROLE_ID
          return ROLE_ID;
        case 11: // CREATOR
          return CREATOR;
        case 12: // CREATETIME
          return CREATETIME;
        case 13: // LOGINTIME
          return LOGINTIME;
        case 14: // LOGINIP
          return LOGINIP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __DEPARTMENTID_ISSET_ID = 2;
  private static final int __POSITIONID_ISSET_ID = 3;
  private static final int __ROLEID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENAME, new org.apache.thrift.meta_data.FieldMetaData("ename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("departmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGINTIME, new org.apache.thrift.meta_data.FieldMetaData("logintime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGINIP, new org.apache.thrift.meta_data.FieldMetaData("loginip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Manager.class, metaDataMap);
  }

  public Manager() {
  }

  public Manager(
    int id,
    String email,
    String password,
    String nickname,
    String ename,
    String logo,
    int status,
    int departmentId,
    int positionId,
    int roleId,
    String creator,
    String createtime,
    String logintime,
    String loginip)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.email = email;
    this.password = password;
    this.nickname = nickname;
    this.ename = ename;
    this.logo = logo;
    this.status = status;
    setStatusIsSet(true);
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    this.positionId = positionId;
    setPositionIdIsSet(true);
    this.roleId = roleId;
    setRoleIdIsSet(true);
    this.creator = creator;
    this.createtime = createtime;
    this.logintime = logintime;
    this.loginip = loginip;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Manager(Manager other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetEname()) {
      this.ename = other.ename;
    }
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    this.status = other.status;
    this.departmentId = other.departmentId;
    this.positionId = other.positionId;
    this.roleId = other.roleId;
    if (other.isSetCreator()) {
      this.creator = other.creator;
    }
    if (other.isSetCreatetime()) {
      this.createtime = other.createtime;
    }
    if (other.isSetLogintime()) {
      this.logintime = other.logintime;
    }
    if (other.isSetLoginip()) {
      this.loginip = other.loginip;
    }
  }

  public Manager deepCopy() {
    return new Manager(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.email = null;
    this.password = null;
    this.nickname = null;
    this.ename = null;
    this.logo = null;
    setStatusIsSet(false);
    this.status = 0;
    setDepartmentIdIsSet(false);
    this.departmentId = 0;
    setPositionIdIsSet(false);
    this.positionId = 0;
    setRoleIdIsSet(false);
    this.roleId = 0;
    this.creator = null;
    this.createtime = null;
    this.logintime = null;
    this.loginip = null;
  }

  public int getId() {
    return this.id;
  }

  public Manager setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getEmail() {
    return this.email;
  }

  public Manager setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public Manager setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getNickname() {
    return this.nickname;
  }

  public Manager setNickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public String getEname() {
    return this.ename;
  }

  public Manager setEname(String ename) {
    this.ename = ename;
    return this;
  }

  public void unsetEname() {
    this.ename = null;
  }

  /** Returns true if field ename is set (has been assigned a value) and false otherwise */
  public boolean isSetEname() {
    return this.ename != null;
  }

  public void setEnameIsSet(boolean value) {
    if (!value) {
      this.ename = null;
    }
  }

  public String getLogo() {
    return this.logo;
  }

  public Manager setLogo(String logo) {
    this.logo = logo;
    return this;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public Manager setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getDepartmentId() {
    return this.departmentId;
  }

  public Manager setDepartmentId(int departmentId) {
    this.departmentId = departmentId;
    setDepartmentIdIsSet(true);
    return this;
  }

  public void unsetDepartmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  /** Returns true if field departmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID);
  }

  public void setDepartmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTMENTID_ISSET_ID, value);
  }

  public int getPositionId() {
    return this.positionId;
  }

  public Manager setPositionId(int positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
    return this;
  }

  public void unsetPositionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public int getRoleId() {
    return this.roleId;
  }

  public Manager setRoleId(int roleId) {
    this.roleId = roleId;
    setRoleIdIsSet(true);
    return this;
  }

  public void unsetRoleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROLEID_ISSET_ID);
  }

  /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROLEID_ISSET_ID);
  }

  public void setRoleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROLEID_ISSET_ID, value);
  }

  public String getCreator() {
    return this.creator;
  }

  public Manager setCreator(String creator) {
    this.creator = creator;
    return this;
  }

  public void unsetCreator() {
    this.creator = null;
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return this.creator != null;
  }

  public void setCreatorIsSet(boolean value) {
    if (!value) {
      this.creator = null;
    }
  }

  public String getCreatetime() {
    return this.createtime;
  }

  public Manager setCreatetime(String createtime) {
    this.createtime = createtime;
    return this;
  }

  public void unsetCreatetime() {
    this.createtime = null;
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return this.createtime != null;
  }

  public void setCreatetimeIsSet(boolean value) {
    if (!value) {
      this.createtime = null;
    }
  }

  public String getLogintime() {
    return this.logintime;
  }

  public Manager setLogintime(String logintime) {
    this.logintime = logintime;
    return this;
  }

  public void unsetLogintime() {
    this.logintime = null;
  }

  /** Returns true if field logintime is set (has been assigned a value) and false otherwise */
  public boolean isSetLogintime() {
    return this.logintime != null;
  }

  public void setLogintimeIsSet(boolean value) {
    if (!value) {
      this.logintime = null;
    }
  }

  public String getLoginip() {
    return this.loginip;
  }

  public Manager setLoginip(String loginip) {
    this.loginip = loginip;
    return this;
  }

  public void unsetLoginip() {
    this.loginip = null;
  }

  /** Returns true if field loginip is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginip() {
    return this.loginip != null;
  }

  public void setLoginipIsSet(boolean value) {
    if (!value) {
      this.loginip = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case ENAME:
      if (value == null) {
        unsetEname();
      } else {
        setEname((String)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DEPARTMENT_ID:
      if (value == null) {
        unsetDepartmentId();
      } else {
        setDepartmentId((Integer)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Integer)value);
      }
      break;

    case ROLE_ID:
      if (value == null) {
        unsetRoleId();
      } else {
        setRoleId((Integer)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((String)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((String)value);
      }
      break;

    case LOGINTIME:
      if (value == null) {
        unsetLogintime();
      } else {
        setLogintime((String)value);
      }
      break;

    case LOGINIP:
      if (value == null) {
        unsetLoginip();
      } else {
        setLoginip((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case EMAIL:
      return getEmail();

    case PASSWORD:
      return getPassword();

    case NICKNAME:
      return getNickname();

    case ENAME:
      return getEname();

    case LOGO:
      return getLogo();

    case STATUS:
      return Integer.valueOf(getStatus());

    case DEPARTMENT_ID:
      return Integer.valueOf(getDepartmentId());

    case POSITION_ID:
      return Integer.valueOf(getPositionId());

    case ROLE_ID:
      return Integer.valueOf(getRoleId());

    case CREATOR:
      return getCreator();

    case CREATETIME:
      return getCreatetime();

    case LOGINTIME:
      return getLogintime();

    case LOGINIP:
      return getLoginip();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case EMAIL:
      return isSetEmail();
    case PASSWORD:
      return isSetPassword();
    case NICKNAME:
      return isSetNickname();
    case ENAME:
      return isSetEname();
    case LOGO:
      return isSetLogo();
    case STATUS:
      return isSetStatus();
    case DEPARTMENT_ID:
      return isSetDepartmentId();
    case POSITION_ID:
      return isSetPositionId();
    case ROLE_ID:
      return isSetRoleId();
    case CREATOR:
      return isSetCreator();
    case CREATETIME:
      return isSetCreatetime();
    case LOGINTIME:
      return isSetLogintime();
    case LOGINIP:
      return isSetLoginip();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Manager)
      return this.equals((Manager)that);
    return false;
  }

  public boolean equals(Manager that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_ename = true && this.isSetEname();
    boolean that_present_ename = true && that.isSetEname();
    if (this_present_ename || that_present_ename) {
      if (!(this_present_ename && that_present_ename))
        return false;
      if (!this.ename.equals(that.ename))
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_departmentId = true;
    boolean that_present_departmentId = true;
    if (this_present_departmentId || that_present_departmentId) {
      if (!(this_present_departmentId && that_present_departmentId))
        return false;
      if (this.departmentId != that.departmentId)
        return false;
    }

    boolean this_present_positionId = true;
    boolean that_present_positionId = true;
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_roleId = true;
    boolean that_present_roleId = true;
    if (this_present_roleId || that_present_roleId) {
      if (!(this_present_roleId && that_present_roleId))
        return false;
      if (this.roleId != that.roleId)
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (!this.creator.equals(that.creator))
        return false;
    }

    boolean this_present_createtime = true && this.isSetCreatetime();
    boolean that_present_createtime = true && that.isSetCreatetime();
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (!this.createtime.equals(that.createtime))
        return false;
    }

    boolean this_present_logintime = true && this.isSetLogintime();
    boolean that_present_logintime = true && that.isSetLogintime();
    if (this_present_logintime || that_present_logintime) {
      if (!(this_present_logintime && that_present_logintime))
        return false;
      if (!this.logintime.equals(that.logintime))
        return false;
    }

    boolean this_present_loginip = true && this.isSetLoginip();
    boolean that_present_loginip = true && that.isSetLoginip();
    if (this_present_loginip || that_present_loginip) {
      if (!(this_present_loginip && that_present_loginip))
        return false;
      if (!this.loginip.equals(that.loginip))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_nickname = true && (isSetNickname());
    list.add(present_nickname);
    if (present_nickname)
      list.add(nickname);

    boolean present_ename = true && (isSetEname());
    list.add(present_ename);
    if (present_ename)
      list.add(ename);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_departmentId = true;
    list.add(present_departmentId);
    if (present_departmentId)
      list.add(departmentId);

    boolean present_positionId = true;
    list.add(present_positionId);
    if (present_positionId)
      list.add(positionId);

    boolean present_roleId = true;
    list.add(present_roleId);
    if (present_roleId)
      list.add(roleId);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_createtime = true && (isSetCreatetime());
    list.add(present_createtime);
    if (present_createtime)
      list.add(createtime);

    boolean present_logintime = true && (isSetLogintime());
    list.add(present_logintime);
    if (present_logintime)
      list.add(logintime);

    boolean present_loginip = true && (isSetLoginip());
    list.add(present_loginip);
    if (present_loginip)
      list.add(loginip);

    return list.hashCode();
  }

  @Override
  public int compareTo(Manager other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEname()).compareTo(other.isSetEname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ename, other.ename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartmentId()).compareTo(other.isSetDepartmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentId, other.departmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogintime()).compareTo(other.isSetLogintime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogintime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logintime, other.logintime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginip()).compareTo(other.isSetLoginip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginip, other.loginip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Manager(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickname:");
    if (this.nickname == null) {
      sb.append("null");
    } else {
      sb.append(this.nickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ename:");
    if (this.ename == null) {
      sb.append("null");
    } else {
      sb.append(this.ename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logo:");
    if (this.logo == null) {
      sb.append("null");
    } else {
      sb.append(this.logo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("departmentId:");
    sb.append(this.departmentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionId:");
    sb.append(this.positionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleId:");
    sb.append(this.roleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    if (this.creator == null) {
      sb.append("null");
    } else {
      sb.append(this.creator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createtime:");
    if (this.createtime == null) {
      sb.append("null");
    } else {
      sb.append(this.createtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logintime:");
    if (this.logintime == null) {
      sb.append("null");
    } else {
      sb.append(this.logintime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginip:");
    if (this.loginip == null) {
      sb.append("null");
    } else {
      sb.append(this.loginip);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManagerStandardSchemeFactory implements SchemeFactory {
    public ManagerStandardScheme getScheme() {
      return new ManagerStandardScheme();
    }
  }

  private static class ManagerStandardScheme extends StandardScheme<Manager> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Manager struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ename = iprot.readString();
              struct.setEnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEPARTMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.departmentId = iprot.readI32();
              struct.setDepartmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionId = iprot.readI32();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roleId = iprot.readI32();
              struct.setRoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creator = iprot.readString();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createtime = iprot.readString();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOGINTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logintime = iprot.readString();
              struct.setLogintimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOGINIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginip = iprot.readString();
              struct.setLoginipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Manager struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
        oprot.writeString(struct.nickname);
        oprot.writeFieldEnd();
      }
      if (struct.ename != null) {
        oprot.writeFieldBegin(ENAME_FIELD_DESC);
        oprot.writeString(struct.ename);
        oprot.writeFieldEnd();
      }
      if (struct.logo != null) {
        oprot.writeFieldBegin(LOGO_FIELD_DESC);
        oprot.writeString(struct.logo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEPARTMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.departmentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
      oprot.writeI32(struct.positionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
      oprot.writeI32(struct.roleId);
      oprot.writeFieldEnd();
      if (struct.creator != null) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        oprot.writeString(struct.creator);
        oprot.writeFieldEnd();
      }
      if (struct.createtime != null) {
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeString(struct.createtime);
        oprot.writeFieldEnd();
      }
      if (struct.logintime != null) {
        oprot.writeFieldBegin(LOGINTIME_FIELD_DESC);
        oprot.writeString(struct.logintime);
        oprot.writeFieldEnd();
      }
      if (struct.loginip != null) {
        oprot.writeFieldBegin(LOGINIP_FIELD_DESC);
        oprot.writeString(struct.loginip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManagerTupleSchemeFactory implements SchemeFactory {
    public ManagerTupleScheme getScheme() {
      return new ManagerTupleScheme();
    }
  }

  private static class ManagerTupleScheme extends TupleScheme<Manager> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Manager struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetEmail()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetNickname()) {
        optionals.set(3);
      }
      if (struct.isSetEname()) {
        optionals.set(4);
      }
      if (struct.isSetLogo()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetDepartmentId()) {
        optionals.set(7);
      }
      if (struct.isSetPositionId()) {
        optionals.set(8);
      }
      if (struct.isSetRoleId()) {
        optionals.set(9);
      }
      if (struct.isSetCreator()) {
        optionals.set(10);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(11);
      }
      if (struct.isSetLogintime()) {
        optionals.set(12);
      }
      if (struct.isSetLoginip()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetEname()) {
        oprot.writeString(struct.ename);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDepartmentId()) {
        oprot.writeI32(struct.departmentId);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI32(struct.positionId);
      }
      if (struct.isSetRoleId()) {
        oprot.writeI32(struct.roleId);
      }
      if (struct.isSetCreator()) {
        oprot.writeString(struct.creator);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeString(struct.createtime);
      }
      if (struct.isSetLogintime()) {
        oprot.writeString(struct.logintime);
      }
      if (struct.isSetLoginip()) {
        oprot.writeString(struct.loginip);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Manager struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ename = iprot.readString();
        struct.setEnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.departmentId = iprot.readI32();
        struct.setDepartmentIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.positionId = iprot.readI32();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.roleId = iprot.readI32();
        struct.setRoleIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.creator = iprot.readString();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createtime = iprot.readString();
        struct.setCreatetimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.logintime = iprot.readString();
        struct.setLogintimeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.loginip = iprot.readString();
        struct.setLoginipIsSet(true);
      }
    }
  }

}

