/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dihaitech.tserver.managercenter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-27")
public class Department implements org.apache.thrift.TBase<Department, Department._Fields>, java.io.Serializable, Cloneable, Comparable<Department> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Department");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEADER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderEmail", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("superId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("updator", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updatetime", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DepartmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DepartmentTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public String code; // required
  public int type; // required
  public String leaderEmail; // required
  public int superId; // required
  public String creator; // required
  public String createtime; // required
  public String updator; // required
  public String updatetime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CODE((short)3, "code"),
    TYPE((short)4, "type"),
    LEADER_EMAIL((short)5, "leaderEmail"),
    SUPER_ID((short)6, "superId"),
    CREATOR((short)7, "creator"),
    CREATETIME((short)8, "createtime"),
    UPDATOR((short)9, "updator"),
    UPDATETIME((short)10, "updatetime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CODE
          return CODE;
        case 4: // TYPE
          return TYPE;
        case 5: // LEADER_EMAIL
          return LEADER_EMAIL;
        case 6: // SUPER_ID
          return SUPER_ID;
        case 7: // CREATOR
          return CREATOR;
        case 8: // CREATETIME
          return CREATETIME;
        case 9: // UPDATOR
          return UPDATOR;
        case 10: // UPDATETIME
          return UPDATETIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __SUPERID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEADER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("leaderEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPER_ID, new org.apache.thrift.meta_data.FieldMetaData("superId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATOR, new org.apache.thrift.meta_data.FieldMetaData("updator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATETIME, new org.apache.thrift.meta_data.FieldMetaData("updatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Department.class, metaDataMap);
  }

  public Department() {
  }

  public Department(
    int id,
    String name,
    String code,
    int type,
    String leaderEmail,
    int superId,
    String creator,
    String createtime,
    String updator,
    String updatetime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.code = code;
    this.type = type;
    setTypeIsSet(true);
    this.leaderEmail = leaderEmail;
    this.superId = superId;
    setSuperIdIsSet(true);
    this.creator = creator;
    this.createtime = createtime;
    this.updator = updator;
    this.updatetime = updatetime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Department(Department other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    this.type = other.type;
    if (other.isSetLeaderEmail()) {
      this.leaderEmail = other.leaderEmail;
    }
    this.superId = other.superId;
    if (other.isSetCreator()) {
      this.creator = other.creator;
    }
    if (other.isSetCreatetime()) {
      this.createtime = other.createtime;
    }
    if (other.isSetUpdator()) {
      this.updator = other.updator;
    }
    if (other.isSetUpdatetime()) {
      this.updatetime = other.updatetime;
    }
  }

  public Department deepCopy() {
    return new Department(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.code = null;
    setTypeIsSet(false);
    this.type = 0;
    this.leaderEmail = null;
    setSuperIdIsSet(false);
    this.superId = 0;
    this.creator = null;
    this.createtime = null;
    this.updator = null;
    this.updatetime = null;
  }

  public int getId() {
    return this.id;
  }

  public Department setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Department setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public Department setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public Department setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getLeaderEmail() {
    return this.leaderEmail;
  }

  public Department setLeaderEmail(String leaderEmail) {
    this.leaderEmail = leaderEmail;
    return this;
  }

  public void unsetLeaderEmail() {
    this.leaderEmail = null;
  }

  /** Returns true if field leaderEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderEmail() {
    return this.leaderEmail != null;
  }

  public void setLeaderEmailIsSet(boolean value) {
    if (!value) {
      this.leaderEmail = null;
    }
  }

  public int getSuperId() {
    return this.superId;
  }

  public Department setSuperId(int superId) {
    this.superId = superId;
    setSuperIdIsSet(true);
    return this;
  }

  public void unsetSuperId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERID_ISSET_ID);
  }

  /** Returns true if field superId is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERID_ISSET_ID);
  }

  public void setSuperIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERID_ISSET_ID, value);
  }

  public String getCreator() {
    return this.creator;
  }

  public Department setCreator(String creator) {
    this.creator = creator;
    return this;
  }

  public void unsetCreator() {
    this.creator = null;
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return this.creator != null;
  }

  public void setCreatorIsSet(boolean value) {
    if (!value) {
      this.creator = null;
    }
  }

  public String getCreatetime() {
    return this.createtime;
  }

  public Department setCreatetime(String createtime) {
    this.createtime = createtime;
    return this;
  }

  public void unsetCreatetime() {
    this.createtime = null;
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return this.createtime != null;
  }

  public void setCreatetimeIsSet(boolean value) {
    if (!value) {
      this.createtime = null;
    }
  }

  public String getUpdator() {
    return this.updator;
  }

  public Department setUpdator(String updator) {
    this.updator = updator;
    return this;
  }

  public void unsetUpdator() {
    this.updator = null;
  }

  /** Returns true if field updator is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdator() {
    return this.updator != null;
  }

  public void setUpdatorIsSet(boolean value) {
    if (!value) {
      this.updator = null;
    }
  }

  public String getUpdatetime() {
    return this.updatetime;
  }

  public Department setUpdatetime(String updatetime) {
    this.updatetime = updatetime;
    return this;
  }

  public void unsetUpdatetime() {
    this.updatetime = null;
  }

  /** Returns true if field updatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatetime() {
    return this.updatetime != null;
  }

  public void setUpdatetimeIsSet(boolean value) {
    if (!value) {
      this.updatetime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case LEADER_EMAIL:
      if (value == null) {
        unsetLeaderEmail();
      } else {
        setLeaderEmail((String)value);
      }
      break;

    case SUPER_ID:
      if (value == null) {
        unsetSuperId();
      } else {
        setSuperId((Integer)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((String)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((String)value);
      }
      break;

    case UPDATOR:
      if (value == null) {
        unsetUpdator();
      } else {
        setUpdator((String)value);
      }
      break;

    case UPDATETIME:
      if (value == null) {
        unsetUpdatetime();
      } else {
        setUpdatetime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case CODE:
      return getCode();

    case TYPE:
      return Integer.valueOf(getType());

    case LEADER_EMAIL:
      return getLeaderEmail();

    case SUPER_ID:
      return Integer.valueOf(getSuperId());

    case CREATOR:
      return getCreator();

    case CREATETIME:
      return getCreatetime();

    case UPDATOR:
      return getUpdator();

    case UPDATETIME:
      return getUpdatetime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CODE:
      return isSetCode();
    case TYPE:
      return isSetType();
    case LEADER_EMAIL:
      return isSetLeaderEmail();
    case SUPER_ID:
      return isSetSuperId();
    case CREATOR:
      return isSetCreator();
    case CREATETIME:
      return isSetCreatetime();
    case UPDATOR:
      return isSetUpdator();
    case UPDATETIME:
      return isSetUpdatetime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Department)
      return this.equals((Department)that);
    return false;
  }

  public boolean equals(Department that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_leaderEmail = true && this.isSetLeaderEmail();
    boolean that_present_leaderEmail = true && that.isSetLeaderEmail();
    if (this_present_leaderEmail || that_present_leaderEmail) {
      if (!(this_present_leaderEmail && that_present_leaderEmail))
        return false;
      if (!this.leaderEmail.equals(that.leaderEmail))
        return false;
    }

    boolean this_present_superId = true;
    boolean that_present_superId = true;
    if (this_present_superId || that_present_superId) {
      if (!(this_present_superId && that_present_superId))
        return false;
      if (this.superId != that.superId)
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (!this.creator.equals(that.creator))
        return false;
    }

    boolean this_present_createtime = true && this.isSetCreatetime();
    boolean that_present_createtime = true && that.isSetCreatetime();
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (!this.createtime.equals(that.createtime))
        return false;
    }

    boolean this_present_updator = true && this.isSetUpdator();
    boolean that_present_updator = true && that.isSetUpdator();
    if (this_present_updator || that_present_updator) {
      if (!(this_present_updator && that_present_updator))
        return false;
      if (!this.updator.equals(that.updator))
        return false;
    }

    boolean this_present_updatetime = true && this.isSetUpdatetime();
    boolean that_present_updatetime = true && that.isSetUpdatetime();
    if (this_present_updatetime || that_present_updatetime) {
      if (!(this_present_updatetime && that_present_updatetime))
        return false;
      if (!this.updatetime.equals(that.updatetime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_leaderEmail = true && (isSetLeaderEmail());
    list.add(present_leaderEmail);
    if (present_leaderEmail)
      list.add(leaderEmail);

    boolean present_superId = true;
    list.add(present_superId);
    if (present_superId)
      list.add(superId);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_createtime = true && (isSetCreatetime());
    list.add(present_createtime);
    if (present_createtime)
      list.add(createtime);

    boolean present_updator = true && (isSetUpdator());
    list.add(present_updator);
    if (present_updator)
      list.add(updator);

    boolean present_updatetime = true && (isSetUpdatetime());
    list.add(present_updatetime);
    if (present_updatetime)
      list.add(updatetime);

    return list.hashCode();
  }

  @Override
  public int compareTo(Department other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaderEmail()).compareTo(other.isSetLeaderEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderEmail, other.leaderEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperId()).compareTo(other.isSetSuperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superId, other.superId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdator()).compareTo(other.isSetUpdator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updator, other.updator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatetime()).compareTo(other.isSetUpdatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatetime, other.updatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Department(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaderEmail:");
    if (this.leaderEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.leaderEmail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superId:");
    sb.append(this.superId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    if (this.creator == null) {
      sb.append("null");
    } else {
      sb.append(this.creator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createtime:");
    if (this.createtime == null) {
      sb.append("null");
    } else {
      sb.append(this.createtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updator:");
    if (this.updator == null) {
      sb.append("null");
    } else {
      sb.append(this.updator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatetime:");
    if (this.updatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.updatetime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DepartmentStandardSchemeFactory implements SchemeFactory {
    public DepartmentStandardScheme getScheme() {
      return new DepartmentStandardScheme();
    }
  }

  private static class DepartmentStandardScheme extends StandardScheme<Department> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Department struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEADER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.leaderEmail = iprot.readString();
              struct.setLeaderEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.superId = iprot.readI32();
              struct.setSuperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creator = iprot.readString();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createtime = iprot.readString();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updator = iprot.readString();
              struct.setUpdatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatetime = iprot.readString();
              struct.setUpdatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Department struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.leaderEmail != null) {
        oprot.writeFieldBegin(LEADER_EMAIL_FIELD_DESC);
        oprot.writeString(struct.leaderEmail);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUPER_ID_FIELD_DESC);
      oprot.writeI32(struct.superId);
      oprot.writeFieldEnd();
      if (struct.creator != null) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        oprot.writeString(struct.creator);
        oprot.writeFieldEnd();
      }
      if (struct.createtime != null) {
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeString(struct.createtime);
        oprot.writeFieldEnd();
      }
      if (struct.updator != null) {
        oprot.writeFieldBegin(UPDATOR_FIELD_DESC);
        oprot.writeString(struct.updator);
        oprot.writeFieldEnd();
      }
      if (struct.updatetime != null) {
        oprot.writeFieldBegin(UPDATETIME_FIELD_DESC);
        oprot.writeString(struct.updatetime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DepartmentTupleSchemeFactory implements SchemeFactory {
    public DepartmentTupleScheme getScheme() {
      return new DepartmentTupleScheme();
    }
  }

  private static class DepartmentTupleScheme extends TupleScheme<Department> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Department struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCode()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetLeaderEmail()) {
        optionals.set(4);
      }
      if (struct.isSetSuperId()) {
        optionals.set(5);
      }
      if (struct.isSetCreator()) {
        optionals.set(6);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(7);
      }
      if (struct.isSetUpdator()) {
        optionals.set(8);
      }
      if (struct.isSetUpdatetime()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetLeaderEmail()) {
        oprot.writeString(struct.leaderEmail);
      }
      if (struct.isSetSuperId()) {
        oprot.writeI32(struct.superId);
      }
      if (struct.isSetCreator()) {
        oprot.writeString(struct.creator);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeString(struct.createtime);
      }
      if (struct.isSetUpdator()) {
        oprot.writeString(struct.updator);
      }
      if (struct.isSetUpdatetime()) {
        oprot.writeString(struct.updatetime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Department struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.leaderEmail = iprot.readString();
        struct.setLeaderEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.superId = iprot.readI32();
        struct.setSuperIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creator = iprot.readString();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createtime = iprot.readString();
        struct.setCreatetimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updator = iprot.readString();
        struct.setUpdatorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updatetime = iprot.readString();
        struct.setUpdatetimeIsSet(true);
      }
    }
  }

}

