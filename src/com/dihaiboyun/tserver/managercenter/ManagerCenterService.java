/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dihaiboyun.tserver.managercenter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-27")
public class ManagerCenterService {

  public interface Iface {

    public List<Manager> funCallManager(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public List<ManagerInfo> funCallManagerInfo(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public List<Department> funCallDepartment(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException;

    public List<Member> funCallMember(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void funCallManager(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void funCallManagerInfo(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void funCallDepartment(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void funCallMember(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Manager> funCallManager(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_funCallManager(callTime, funCode, paramMap);
      return recv_funCallManager();
    }

    public void send_funCallManager(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      funCallManager_args args = new funCallManager_args();
      args.setCallTime(callTime);
      args.setFunCode(funCode);
      args.setParamMap(paramMap);
      sendBase("funCallManager", args);
    }

    public List<Manager> recv_funCallManager() throws org.apache.thrift.TException
    {
      funCallManager_result result = new funCallManager_result();
      receiveBase(result, "funCallManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "funCallManager failed: unknown result");
    }

    public List<ManagerInfo> funCallManagerInfo(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_funCallManagerInfo(callTime, funCode, paramMap);
      return recv_funCallManagerInfo();
    }

    public void send_funCallManagerInfo(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      funCallManagerInfo_args args = new funCallManagerInfo_args();
      args.setCallTime(callTime);
      args.setFunCode(funCode);
      args.setParamMap(paramMap);
      sendBase("funCallManagerInfo", args);
    }

    public List<ManagerInfo> recv_funCallManagerInfo() throws org.apache.thrift.TException
    {
      funCallManagerInfo_result result = new funCallManagerInfo_result();
      receiveBase(result, "funCallManagerInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "funCallManagerInfo failed: unknown result");
    }

    public List<Department> funCallDepartment(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_funCallDepartment(callTime, funCode, paramMap);
      return recv_funCallDepartment();
    }

    public void send_funCallDepartment(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      funCallDepartment_args args = new funCallDepartment_args();
      args.setCallTime(callTime);
      args.setFunCode(funCode);
      args.setParamMap(paramMap);
      sendBase("funCallDepartment", args);
    }

    public List<Department> recv_funCallDepartment() throws org.apache.thrift.TException
    {
      funCallDepartment_result result = new funCallDepartment_result();
      receiveBase(result, "funCallDepartment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "funCallDepartment failed: unknown result");
    }

    public List<Member> funCallMember(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      send_funCallMember(callTime, funCode, paramMap);
      return recv_funCallMember();
    }

    public void send_funCallMember(long callTime, String funCode, Map<String,String> paramMap) throws org.apache.thrift.TException
    {
      funCallMember_args args = new funCallMember_args();
      args.setCallTime(callTime);
      args.setFunCode(funCode);
      args.setParamMap(paramMap);
      sendBase("funCallMember", args);
    }

    public List<Member> recv_funCallMember() throws org.apache.thrift.TException
    {
      funCallMember_result result = new funCallMember_result();
      receiveBase(result, "funCallMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "funCallMember failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void funCallManager(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      funCallManager_call method_call = new funCallManager_call(callTime, funCode, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class funCallManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long callTime;
      private String funCode;
      private Map<String,String> paramMap;
      public funCallManager_call(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.callTime = callTime;
        this.funCode = funCode;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("funCallManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        funCallManager_args args = new funCallManager_args();
        args.setCallTime(callTime);
        args.setFunCode(funCode);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Manager> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_funCallManager();
      }
    }

    public void funCallManagerInfo(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      funCallManagerInfo_call method_call = new funCallManagerInfo_call(callTime, funCode, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class funCallManagerInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long callTime;
      private String funCode;
      private Map<String,String> paramMap;
      public funCallManagerInfo_call(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.callTime = callTime;
        this.funCode = funCode;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("funCallManagerInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        funCallManagerInfo_args args = new funCallManagerInfo_args();
        args.setCallTime(callTime);
        args.setFunCode(funCode);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ManagerInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_funCallManagerInfo();
      }
    }

    public void funCallDepartment(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      funCallDepartment_call method_call = new funCallDepartment_call(callTime, funCode, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class funCallDepartment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long callTime;
      private String funCode;
      private Map<String,String> paramMap;
      public funCallDepartment_call(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.callTime = callTime;
        this.funCode = funCode;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("funCallDepartment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        funCallDepartment_args args = new funCallDepartment_args();
        args.setCallTime(callTime);
        args.setFunCode(funCode);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Department> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_funCallDepartment();
      }
    }

    public void funCallMember(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      funCallMember_call method_call = new funCallMember_call(callTime, funCode, paramMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class funCallMember_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long callTime;
      private String funCode;
      private Map<String,String> paramMap;
      public funCallMember_call(long callTime, String funCode, Map<String,String> paramMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.callTime = callTime;
        this.funCode = funCode;
        this.paramMap = paramMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("funCallMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        funCallMember_args args = new funCallMember_args();
        args.setCallTime(callTime);
        args.setFunCode(funCode);
        args.setParamMap(paramMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Member> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_funCallMember();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("funCallManager", new funCallManager());
      processMap.put("funCallManagerInfo", new funCallManagerInfo());
      processMap.put("funCallDepartment", new funCallDepartment());
      processMap.put("funCallMember", new funCallMember());
      return processMap;
    }

    public static class funCallManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, funCallManager_args> {
      public funCallManager() {
        super("funCallManager");
      }

      public funCallManager_args getEmptyArgsInstance() {
        return new funCallManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public funCallManager_result getResult(I iface, funCallManager_args args) throws org.apache.thrift.TException {
        funCallManager_result result = new funCallManager_result();
        result.success = iface.funCallManager(args.callTime, args.funCode, args.paramMap);
        return result;
      }
    }

    public static class funCallManagerInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, funCallManagerInfo_args> {
      public funCallManagerInfo() {
        super("funCallManagerInfo");
      }

      public funCallManagerInfo_args getEmptyArgsInstance() {
        return new funCallManagerInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public funCallManagerInfo_result getResult(I iface, funCallManagerInfo_args args) throws org.apache.thrift.TException {
        funCallManagerInfo_result result = new funCallManagerInfo_result();
        result.success = iface.funCallManagerInfo(args.callTime, args.funCode, args.paramMap);
        return result;
      }
    }

    public static class funCallDepartment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, funCallDepartment_args> {
      public funCallDepartment() {
        super("funCallDepartment");
      }

      public funCallDepartment_args getEmptyArgsInstance() {
        return new funCallDepartment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public funCallDepartment_result getResult(I iface, funCallDepartment_args args) throws org.apache.thrift.TException {
        funCallDepartment_result result = new funCallDepartment_result();
        result.success = iface.funCallDepartment(args.callTime, args.funCode, args.paramMap);
        return result;
      }
    }

    public static class funCallMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, funCallMember_args> {
      public funCallMember() {
        super("funCallMember");
      }

      public funCallMember_args getEmptyArgsInstance() {
        return new funCallMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public funCallMember_result getResult(I iface, funCallMember_args args) throws org.apache.thrift.TException {
        funCallMember_result result = new funCallMember_result();
        result.success = iface.funCallMember(args.callTime, args.funCode, args.paramMap);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("funCallManager", new funCallManager());
      processMap.put("funCallManagerInfo", new funCallManagerInfo());
      processMap.put("funCallDepartment", new funCallDepartment());
      processMap.put("funCallMember", new funCallMember());
      return processMap;
    }

    public static class funCallManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, funCallManager_args, List<Manager>> {
      public funCallManager() {
        super("funCallManager");
      }

      public funCallManager_args getEmptyArgsInstance() {
        return new funCallManager_args();
      }

      public AsyncMethodCallback<List<Manager>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Manager>>() { 
          public void onComplete(List<Manager> o) {
            funCallManager_result result = new funCallManager_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            funCallManager_result result = new funCallManager_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, funCallManager_args args, org.apache.thrift.async.AsyncMethodCallback<List<Manager>> resultHandler) throws TException {
        iface.funCallManager(args.callTime, args.funCode, args.paramMap,resultHandler);
      }
    }

    public static class funCallManagerInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, funCallManagerInfo_args, List<ManagerInfo>> {
      public funCallManagerInfo() {
        super("funCallManagerInfo");
      }

      public funCallManagerInfo_args getEmptyArgsInstance() {
        return new funCallManagerInfo_args();
      }

      public AsyncMethodCallback<List<ManagerInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ManagerInfo>>() { 
          public void onComplete(List<ManagerInfo> o) {
            funCallManagerInfo_result result = new funCallManagerInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            funCallManagerInfo_result result = new funCallManagerInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, funCallManagerInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<ManagerInfo>> resultHandler) throws TException {
        iface.funCallManagerInfo(args.callTime, args.funCode, args.paramMap,resultHandler);
      }
    }

    public static class funCallDepartment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, funCallDepartment_args, List<Department>> {
      public funCallDepartment() {
        super("funCallDepartment");
      }

      public funCallDepartment_args getEmptyArgsInstance() {
        return new funCallDepartment_args();
      }

      public AsyncMethodCallback<List<Department>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Department>>() { 
          public void onComplete(List<Department> o) {
            funCallDepartment_result result = new funCallDepartment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            funCallDepartment_result result = new funCallDepartment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, funCallDepartment_args args, org.apache.thrift.async.AsyncMethodCallback<List<Department>> resultHandler) throws TException {
        iface.funCallDepartment(args.callTime, args.funCode, args.paramMap,resultHandler);
      }
    }

    public static class funCallMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, funCallMember_args, List<Member>> {
      public funCallMember() {
        super("funCallMember");
      }

      public funCallMember_args getEmptyArgsInstance() {
        return new funCallMember_args();
      }

      public AsyncMethodCallback<List<Member>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Member>>() { 
          public void onComplete(List<Member> o) {
            funCallMember_result result = new funCallMember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            funCallMember_result result = new funCallMember_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, funCallMember_args args, org.apache.thrift.async.AsyncMethodCallback<List<Member>> resultHandler) throws TException {
        iface.funCallMember(args.callTime, args.funCode, args.paramMap,resultHandler);
      }
    }

  }

  public static class funCallManager_args implements org.apache.thrift.TBase<funCallManager_args, funCallManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<funCallManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallManager_args");

    private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FUN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("funCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallManager_argsTupleSchemeFactory());
    }

    public long callTime; // required
    public String funCode; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALL_TIME((short)1, "callTime"),
      FUN_CODE((short)2, "funCode"),
      PARAM_MAP((short)3, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALL_TIME
            return CALL_TIME;
          case 2: // FUN_CODE
            return FUN_CODE;
          case 3: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALLTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FUN_CODE, new org.apache.thrift.meta_data.FieldMetaData("funCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallManager_args.class, metaDataMap);
    }

    public funCallManager_args() {
    }

    public funCallManager_args(
      long callTime,
      String funCode,
      Map<String,String> paramMap)
    {
      this();
      this.callTime = callTime;
      setCallTimeIsSet(true);
      this.funCode = funCode;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallManager_args(funCallManager_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.callTime = other.callTime;
      if (other.isSetFunCode()) {
        this.funCode = other.funCode;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public funCallManager_args deepCopy() {
      return new funCallManager_args(this);
    }

    @Override
    public void clear() {
      setCallTimeIsSet(false);
      this.callTime = 0;
      this.funCode = null;
      this.paramMap = null;
    }

    public long getCallTime() {
      return this.callTime;
    }

    public funCallManager_args setCallTime(long callTime) {
      this.callTime = callTime;
      setCallTimeIsSet(true);
      return this;
    }

    public void unsetCallTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCallTime() {
      return EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    public void setCallTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
    }

    public String getFunCode() {
      return this.funCode;
    }

    public funCallManager_args setFunCode(String funCode) {
      this.funCode = funCode;
      return this;
    }

    public void unsetFunCode() {
      this.funCode = null;
    }

    /** Returns true if field funCode is set (has been assigned a value) and false otherwise */
    public boolean isSetFunCode() {
      return this.funCode != null;
    }

    public void setFunCodeIsSet(boolean value) {
      if (!value) {
        this.funCode = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public funCallManager_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALL_TIME:
        if (value == null) {
          unsetCallTime();
        } else {
          setCallTime((Long)value);
        }
        break;

      case FUN_CODE:
        if (value == null) {
          unsetFunCode();
        } else {
          setFunCode((String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALL_TIME:
        return Long.valueOf(getCallTime());

      case FUN_CODE:
        return getFunCode();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALL_TIME:
        return isSetCallTime();
      case FUN_CODE:
        return isSetFunCode();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallManager_args)
        return this.equals((funCallManager_args)that);
      return false;
    }

    public boolean equals(funCallManager_args that) {
      if (that == null)
        return false;

      boolean this_present_callTime = true;
      boolean that_present_callTime = true;
      if (this_present_callTime || that_present_callTime) {
        if (!(this_present_callTime && that_present_callTime))
          return false;
        if (this.callTime != that.callTime)
          return false;
      }

      boolean this_present_funCode = true && this.isSetFunCode();
      boolean that_present_funCode = true && that.isSetFunCode();
      if (this_present_funCode || that_present_funCode) {
        if (!(this_present_funCode && that_present_funCode))
          return false;
        if (!this.funCode.equals(that.funCode))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_callTime = true;
      list.add(present_callTime);
      if (present_callTime)
        list.add(callTime);

      boolean present_funCode = true && (isSetFunCode());
      list.add(present_funCode);
      if (present_funCode)
        list.add(funCode);

      boolean present_paramMap = true && (isSetParamMap());
      list.add(present_paramMap);
      if (present_paramMap)
        list.add(paramMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFunCode()).compareTo(other.isSetFunCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funCode, other.funCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallManager_args(");
      boolean first = true;

      sb.append("callTime:");
      sb.append(this.callTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("funCode:");
      if (this.funCode == null) {
        sb.append("null");
      } else {
        sb.append(this.funCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallManager_argsStandardSchemeFactory implements SchemeFactory {
      public funCallManager_argsStandardScheme getScheme() {
        return new funCallManager_argsStandardScheme();
      }
    }

    private static class funCallManager_argsStandardScheme extends StandardScheme<funCallManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALL_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.callTime = iprot.readI64();
                struct.setCallTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FUN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.funCode = iprot.readString();
                struct.setFunCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.paramMap.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
        oprot.writeI64(struct.callTime);
        oprot.writeFieldEnd();
        if (struct.funCode != null) {
          oprot.writeFieldBegin(FUN_CODE_FIELD_DESC);
          oprot.writeString(struct.funCode);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter4 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallManager_argsTupleSchemeFactory implements SchemeFactory {
      public funCallManager_argsTupleScheme getScheme() {
        return new funCallManager_argsTupleScheme();
      }
    }

    private static class funCallManager_argsTupleScheme extends TupleScheme<funCallManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCallTime()) {
          optionals.set(0);
        }
        if (struct.isSetFunCode()) {
          optionals.set(1);
        }
        if (struct.isSetParamMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCallTime()) {
          oprot.writeI64(struct.callTime);
        }
        if (struct.isSetFunCode()) {
          oprot.writeString(struct.funCode);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter5 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.callTime = iprot.readI64();
          struct.setCallTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.funCode = iprot.readString();
          struct.setFunCodeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.paramMap.put(_key7, _val8);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class funCallManager_result implements org.apache.thrift.TBase<funCallManager_result, funCallManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<funCallManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallManager_resultTupleSchemeFactory());
    }

    public List<Manager> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Manager.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallManager_result.class, metaDataMap);
    }

    public funCallManager_result() {
    }

    public funCallManager_result(
      List<Manager> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallManager_result(funCallManager_result other) {
      if (other.isSetSuccess()) {
        List<Manager> __this__success = new ArrayList<Manager>(other.success.size());
        for (Manager other_element : other.success) {
          __this__success.add(new Manager(other_element));
        }
        this.success = __this__success;
      }
    }

    public funCallManager_result deepCopy() {
      return new funCallManager_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Manager> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Manager elem) {
      if (this.success == null) {
        this.success = new ArrayList<Manager>();
      }
      this.success.add(elem);
    }

    public List<Manager> getSuccess() {
      return this.success;
    }

    public funCallManager_result setSuccess(List<Manager> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Manager>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallManager_result)
        return this.equals((funCallManager_result)that);
      return false;
    }

    public boolean equals(funCallManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallManager_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallManager_resultStandardSchemeFactory implements SchemeFactory {
      public funCallManager_resultStandardScheme getScheme() {
        return new funCallManager_resultStandardScheme();
      }
    }

    private static class funCallManager_resultStandardScheme extends StandardScheme<funCallManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.success = new ArrayList<Manager>(_list10.size);
                  Manager _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = new Manager();
                    _elem11.read(iprot);
                    struct.success.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Manager _iter13 : struct.success)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallManager_resultTupleSchemeFactory implements SchemeFactory {
      public funCallManager_resultTupleScheme getScheme() {
        return new funCallManager_resultTupleScheme();
      }
    }

    private static class funCallManager_resultTupleScheme extends TupleScheme<funCallManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Manager _iter14 : struct.success)
            {
              _iter14.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Manager>(_list15.size);
            Manager _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = new Manager();
              _elem16.read(iprot);
              struct.success.add(_elem16);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class funCallManagerInfo_args implements org.apache.thrift.TBase<funCallManagerInfo_args, funCallManagerInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<funCallManagerInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallManagerInfo_args");

    private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FUN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("funCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallManagerInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallManagerInfo_argsTupleSchemeFactory());
    }

    public long callTime; // required
    public String funCode; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALL_TIME((short)1, "callTime"),
      FUN_CODE((short)2, "funCode"),
      PARAM_MAP((short)3, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALL_TIME
            return CALL_TIME;
          case 2: // FUN_CODE
            return FUN_CODE;
          case 3: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALLTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FUN_CODE, new org.apache.thrift.meta_data.FieldMetaData("funCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallManagerInfo_args.class, metaDataMap);
    }

    public funCallManagerInfo_args() {
    }

    public funCallManagerInfo_args(
      long callTime,
      String funCode,
      Map<String,String> paramMap)
    {
      this();
      this.callTime = callTime;
      setCallTimeIsSet(true);
      this.funCode = funCode;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallManagerInfo_args(funCallManagerInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.callTime = other.callTime;
      if (other.isSetFunCode()) {
        this.funCode = other.funCode;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public funCallManagerInfo_args deepCopy() {
      return new funCallManagerInfo_args(this);
    }

    @Override
    public void clear() {
      setCallTimeIsSet(false);
      this.callTime = 0;
      this.funCode = null;
      this.paramMap = null;
    }

    public long getCallTime() {
      return this.callTime;
    }

    public funCallManagerInfo_args setCallTime(long callTime) {
      this.callTime = callTime;
      setCallTimeIsSet(true);
      return this;
    }

    public void unsetCallTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCallTime() {
      return EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    public void setCallTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
    }

    public String getFunCode() {
      return this.funCode;
    }

    public funCallManagerInfo_args setFunCode(String funCode) {
      this.funCode = funCode;
      return this;
    }

    public void unsetFunCode() {
      this.funCode = null;
    }

    /** Returns true if field funCode is set (has been assigned a value) and false otherwise */
    public boolean isSetFunCode() {
      return this.funCode != null;
    }

    public void setFunCodeIsSet(boolean value) {
      if (!value) {
        this.funCode = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public funCallManagerInfo_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALL_TIME:
        if (value == null) {
          unsetCallTime();
        } else {
          setCallTime((Long)value);
        }
        break;

      case FUN_CODE:
        if (value == null) {
          unsetFunCode();
        } else {
          setFunCode((String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALL_TIME:
        return Long.valueOf(getCallTime());

      case FUN_CODE:
        return getFunCode();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALL_TIME:
        return isSetCallTime();
      case FUN_CODE:
        return isSetFunCode();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallManagerInfo_args)
        return this.equals((funCallManagerInfo_args)that);
      return false;
    }

    public boolean equals(funCallManagerInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_callTime = true;
      boolean that_present_callTime = true;
      if (this_present_callTime || that_present_callTime) {
        if (!(this_present_callTime && that_present_callTime))
          return false;
        if (this.callTime != that.callTime)
          return false;
      }

      boolean this_present_funCode = true && this.isSetFunCode();
      boolean that_present_funCode = true && that.isSetFunCode();
      if (this_present_funCode || that_present_funCode) {
        if (!(this_present_funCode && that_present_funCode))
          return false;
        if (!this.funCode.equals(that.funCode))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_callTime = true;
      list.add(present_callTime);
      if (present_callTime)
        list.add(callTime);

      boolean present_funCode = true && (isSetFunCode());
      list.add(present_funCode);
      if (present_funCode)
        list.add(funCode);

      boolean present_paramMap = true && (isSetParamMap());
      list.add(present_paramMap);
      if (present_paramMap)
        list.add(paramMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallManagerInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFunCode()).compareTo(other.isSetFunCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funCode, other.funCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallManagerInfo_args(");
      boolean first = true;

      sb.append("callTime:");
      sb.append(this.callTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("funCode:");
      if (this.funCode == null) {
        sb.append("null");
      } else {
        sb.append(this.funCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallManagerInfo_argsStandardSchemeFactory implements SchemeFactory {
      public funCallManagerInfo_argsStandardScheme getScheme() {
        return new funCallManagerInfo_argsStandardScheme();
      }
    }

    private static class funCallManagerInfo_argsStandardScheme extends StandardScheme<funCallManagerInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallManagerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALL_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.callTime = iprot.readI64();
                struct.setCallTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FUN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.funCode = iprot.readString();
                struct.setFunCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map18.size);
                  String _key19;
                  String _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readString();
                    struct.paramMap.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallManagerInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
        oprot.writeI64(struct.callTime);
        oprot.writeFieldEnd();
        if (struct.funCode != null) {
          oprot.writeFieldBegin(FUN_CODE_FIELD_DESC);
          oprot.writeString(struct.funCode);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter22 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallManagerInfo_argsTupleSchemeFactory implements SchemeFactory {
      public funCallManagerInfo_argsTupleScheme getScheme() {
        return new funCallManagerInfo_argsTupleScheme();
      }
    }

    private static class funCallManagerInfo_argsTupleScheme extends TupleScheme<funCallManagerInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallManagerInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCallTime()) {
          optionals.set(0);
        }
        if (struct.isSetFunCode()) {
          optionals.set(1);
        }
        if (struct.isSetParamMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCallTime()) {
          oprot.writeI64(struct.callTime);
        }
        if (struct.isSetFunCode()) {
          oprot.writeString(struct.funCode);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter23 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallManagerInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.callTime = iprot.readI64();
          struct.setCallTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.funCode = iprot.readString();
          struct.setFunCodeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map24.size);
            String _key25;
            String _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readString();
              struct.paramMap.put(_key25, _val26);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class funCallManagerInfo_result implements org.apache.thrift.TBase<funCallManagerInfo_result, funCallManagerInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<funCallManagerInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallManagerInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallManagerInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallManagerInfo_resultTupleSchemeFactory());
    }

    public List<ManagerInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManagerInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallManagerInfo_result.class, metaDataMap);
    }

    public funCallManagerInfo_result() {
    }

    public funCallManagerInfo_result(
      List<ManagerInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallManagerInfo_result(funCallManagerInfo_result other) {
      if (other.isSetSuccess()) {
        List<ManagerInfo> __this__success = new ArrayList<ManagerInfo>(other.success.size());
        for (ManagerInfo other_element : other.success) {
          __this__success.add(new ManagerInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public funCallManagerInfo_result deepCopy() {
      return new funCallManagerInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ManagerInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ManagerInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<ManagerInfo>();
      }
      this.success.add(elem);
    }

    public List<ManagerInfo> getSuccess() {
      return this.success;
    }

    public funCallManagerInfo_result setSuccess(List<ManagerInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ManagerInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallManagerInfo_result)
        return this.equals((funCallManagerInfo_result)that);
      return false;
    }

    public boolean equals(funCallManagerInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallManagerInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallManagerInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallManagerInfo_resultStandardSchemeFactory implements SchemeFactory {
      public funCallManagerInfo_resultStandardScheme getScheme() {
        return new funCallManagerInfo_resultStandardScheme();
      }
    }

    private static class funCallManagerInfo_resultStandardScheme extends StandardScheme<funCallManagerInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallManagerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<ManagerInfo>(_list28.size);
                  ManagerInfo _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = new ManagerInfo();
                    _elem29.read(iprot);
                    struct.success.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallManagerInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ManagerInfo _iter31 : struct.success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallManagerInfo_resultTupleSchemeFactory implements SchemeFactory {
      public funCallManagerInfo_resultTupleScheme getScheme() {
        return new funCallManagerInfo_resultTupleScheme();
      }
    }

    private static class funCallManagerInfo_resultTupleScheme extends TupleScheme<funCallManagerInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallManagerInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ManagerInfo _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallManagerInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ManagerInfo>(_list33.size);
            ManagerInfo _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = new ManagerInfo();
              _elem34.read(iprot);
              struct.success.add(_elem34);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class funCallDepartment_args implements org.apache.thrift.TBase<funCallDepartment_args, funCallDepartment_args._Fields>, java.io.Serializable, Cloneable, Comparable<funCallDepartment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallDepartment_args");

    private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FUN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("funCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallDepartment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallDepartment_argsTupleSchemeFactory());
    }

    public long callTime; // required
    public String funCode; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALL_TIME((short)1, "callTime"),
      FUN_CODE((short)2, "funCode"),
      PARAM_MAP((short)3, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALL_TIME
            return CALL_TIME;
          case 2: // FUN_CODE
            return FUN_CODE;
          case 3: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALLTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FUN_CODE, new org.apache.thrift.meta_data.FieldMetaData("funCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallDepartment_args.class, metaDataMap);
    }

    public funCallDepartment_args() {
    }

    public funCallDepartment_args(
      long callTime,
      String funCode,
      Map<String,String> paramMap)
    {
      this();
      this.callTime = callTime;
      setCallTimeIsSet(true);
      this.funCode = funCode;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallDepartment_args(funCallDepartment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.callTime = other.callTime;
      if (other.isSetFunCode()) {
        this.funCode = other.funCode;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public funCallDepartment_args deepCopy() {
      return new funCallDepartment_args(this);
    }

    @Override
    public void clear() {
      setCallTimeIsSet(false);
      this.callTime = 0;
      this.funCode = null;
      this.paramMap = null;
    }

    public long getCallTime() {
      return this.callTime;
    }

    public funCallDepartment_args setCallTime(long callTime) {
      this.callTime = callTime;
      setCallTimeIsSet(true);
      return this;
    }

    public void unsetCallTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCallTime() {
      return EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    public void setCallTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
    }

    public String getFunCode() {
      return this.funCode;
    }

    public funCallDepartment_args setFunCode(String funCode) {
      this.funCode = funCode;
      return this;
    }

    public void unsetFunCode() {
      this.funCode = null;
    }

    /** Returns true if field funCode is set (has been assigned a value) and false otherwise */
    public boolean isSetFunCode() {
      return this.funCode != null;
    }

    public void setFunCodeIsSet(boolean value) {
      if (!value) {
        this.funCode = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public funCallDepartment_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALL_TIME:
        if (value == null) {
          unsetCallTime();
        } else {
          setCallTime((Long)value);
        }
        break;

      case FUN_CODE:
        if (value == null) {
          unsetFunCode();
        } else {
          setFunCode((String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALL_TIME:
        return Long.valueOf(getCallTime());

      case FUN_CODE:
        return getFunCode();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALL_TIME:
        return isSetCallTime();
      case FUN_CODE:
        return isSetFunCode();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallDepartment_args)
        return this.equals((funCallDepartment_args)that);
      return false;
    }

    public boolean equals(funCallDepartment_args that) {
      if (that == null)
        return false;

      boolean this_present_callTime = true;
      boolean that_present_callTime = true;
      if (this_present_callTime || that_present_callTime) {
        if (!(this_present_callTime && that_present_callTime))
          return false;
        if (this.callTime != that.callTime)
          return false;
      }

      boolean this_present_funCode = true && this.isSetFunCode();
      boolean that_present_funCode = true && that.isSetFunCode();
      if (this_present_funCode || that_present_funCode) {
        if (!(this_present_funCode && that_present_funCode))
          return false;
        if (!this.funCode.equals(that.funCode))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_callTime = true;
      list.add(present_callTime);
      if (present_callTime)
        list.add(callTime);

      boolean present_funCode = true && (isSetFunCode());
      list.add(present_funCode);
      if (present_funCode)
        list.add(funCode);

      boolean present_paramMap = true && (isSetParamMap());
      list.add(present_paramMap);
      if (present_paramMap)
        list.add(paramMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallDepartment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFunCode()).compareTo(other.isSetFunCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funCode, other.funCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallDepartment_args(");
      boolean first = true;

      sb.append("callTime:");
      sb.append(this.callTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("funCode:");
      if (this.funCode == null) {
        sb.append("null");
      } else {
        sb.append(this.funCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallDepartment_argsStandardSchemeFactory implements SchemeFactory {
      public funCallDepartment_argsStandardScheme getScheme() {
        return new funCallDepartment_argsStandardScheme();
      }
    }

    private static class funCallDepartment_argsStandardScheme extends StandardScheme<funCallDepartment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallDepartment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALL_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.callTime = iprot.readI64();
                struct.setCallTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FUN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.funCode = iprot.readString();
                struct.setFunCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map36.size);
                  String _key37;
                  String _val38;
                  for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                  {
                    _key37 = iprot.readString();
                    _val38 = iprot.readString();
                    struct.paramMap.put(_key37, _val38);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallDepartment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
        oprot.writeI64(struct.callTime);
        oprot.writeFieldEnd();
        if (struct.funCode != null) {
          oprot.writeFieldBegin(FUN_CODE_FIELD_DESC);
          oprot.writeString(struct.funCode);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter40 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter40.getKey());
              oprot.writeString(_iter40.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallDepartment_argsTupleSchemeFactory implements SchemeFactory {
      public funCallDepartment_argsTupleScheme getScheme() {
        return new funCallDepartment_argsTupleScheme();
      }
    }

    private static class funCallDepartment_argsTupleScheme extends TupleScheme<funCallDepartment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallDepartment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCallTime()) {
          optionals.set(0);
        }
        if (struct.isSetFunCode()) {
          optionals.set(1);
        }
        if (struct.isSetParamMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCallTime()) {
          oprot.writeI64(struct.callTime);
        }
        if (struct.isSetFunCode()) {
          oprot.writeString(struct.funCode);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter41 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter41.getKey());
              oprot.writeString(_iter41.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallDepartment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.callTime = iprot.readI64();
          struct.setCallTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.funCode = iprot.readString();
          struct.setFunCodeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map42.size);
            String _key43;
            String _val44;
            for (int _i45 = 0; _i45 < _map42.size; ++_i45)
            {
              _key43 = iprot.readString();
              _val44 = iprot.readString();
              struct.paramMap.put(_key43, _val44);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class funCallDepartment_result implements org.apache.thrift.TBase<funCallDepartment_result, funCallDepartment_result._Fields>, java.io.Serializable, Cloneable, Comparable<funCallDepartment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallDepartment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallDepartment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallDepartment_resultTupleSchemeFactory());
    }

    public List<Department> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Department.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallDepartment_result.class, metaDataMap);
    }

    public funCallDepartment_result() {
    }

    public funCallDepartment_result(
      List<Department> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallDepartment_result(funCallDepartment_result other) {
      if (other.isSetSuccess()) {
        List<Department> __this__success = new ArrayList<Department>(other.success.size());
        for (Department other_element : other.success) {
          __this__success.add(new Department(other_element));
        }
        this.success = __this__success;
      }
    }

    public funCallDepartment_result deepCopy() {
      return new funCallDepartment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Department> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Department elem) {
      if (this.success == null) {
        this.success = new ArrayList<Department>();
      }
      this.success.add(elem);
    }

    public List<Department> getSuccess() {
      return this.success;
    }

    public funCallDepartment_result setSuccess(List<Department> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Department>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallDepartment_result)
        return this.equals((funCallDepartment_result)that);
      return false;
    }

    public boolean equals(funCallDepartment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallDepartment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallDepartment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallDepartment_resultStandardSchemeFactory implements SchemeFactory {
      public funCallDepartment_resultStandardScheme getScheme() {
        return new funCallDepartment_resultStandardScheme();
      }
    }

    private static class funCallDepartment_resultStandardScheme extends StandardScheme<funCallDepartment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallDepartment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                  struct.success = new ArrayList<Department>(_list46.size);
                  Department _elem47;
                  for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                  {
                    _elem47 = new Department();
                    _elem47.read(iprot);
                    struct.success.add(_elem47);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallDepartment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Department _iter49 : struct.success)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallDepartment_resultTupleSchemeFactory implements SchemeFactory {
      public funCallDepartment_resultTupleScheme getScheme() {
        return new funCallDepartment_resultTupleScheme();
      }
    }

    private static class funCallDepartment_resultTupleScheme extends TupleScheme<funCallDepartment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallDepartment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Department _iter50 : struct.success)
            {
              _iter50.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallDepartment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Department>(_list51.size);
            Department _elem52;
            for (int _i53 = 0; _i53 < _list51.size; ++_i53)
            {
              _elem52 = new Department();
              _elem52.read(iprot);
              struct.success.add(_elem52);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class funCallMember_args implements org.apache.thrift.TBase<funCallMember_args, funCallMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<funCallMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallMember_args");

    private static final org.apache.thrift.protocol.TField CALL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("callTime", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FUN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("funCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallMember_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallMember_argsTupleSchemeFactory());
    }

    public long callTime; // required
    public String funCode; // required
    public Map<String,String> paramMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALL_TIME((short)1, "callTime"),
      FUN_CODE((short)2, "funCode"),
      PARAM_MAP((short)3, "paramMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALL_TIME
            return CALL_TIME;
          case 2: // FUN_CODE
            return FUN_CODE;
          case 3: // PARAM_MAP
            return PARAM_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CALLTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALL_TIME, new org.apache.thrift.meta_data.FieldMetaData("callTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FUN_CODE, new org.apache.thrift.meta_data.FieldMetaData("funCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallMember_args.class, metaDataMap);
    }

    public funCallMember_args() {
    }

    public funCallMember_args(
      long callTime,
      String funCode,
      Map<String,String> paramMap)
    {
      this();
      this.callTime = callTime;
      setCallTimeIsSet(true);
      this.funCode = funCode;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallMember_args(funCallMember_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.callTime = other.callTime;
      if (other.isSetFunCode()) {
        this.funCode = other.funCode;
      }
      if (other.isSetParamMap()) {
        Map<String,String> __this__paramMap = new HashMap<String,String>(other.paramMap);
        this.paramMap = __this__paramMap;
      }
    }

    public funCallMember_args deepCopy() {
      return new funCallMember_args(this);
    }

    @Override
    public void clear() {
      setCallTimeIsSet(false);
      this.callTime = 0;
      this.funCode = null;
      this.paramMap = null;
    }

    public long getCallTime() {
      return this.callTime;
    }

    public funCallMember_args setCallTime(long callTime) {
      this.callTime = callTime;
      setCallTimeIsSet(true);
      return this;
    }

    public void unsetCallTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    /** Returns true if field callTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCallTime() {
      return EncodingUtils.testBit(__isset_bitfield, __CALLTIME_ISSET_ID);
    }

    public void setCallTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLTIME_ISSET_ID, value);
    }

    public String getFunCode() {
      return this.funCode;
    }

    public funCallMember_args setFunCode(String funCode) {
      this.funCode = funCode;
      return this;
    }

    public void unsetFunCode() {
      this.funCode = null;
    }

    /** Returns true if field funCode is set (has been assigned a value) and false otherwise */
    public boolean isSetFunCode() {
      return this.funCode != null;
    }

    public void setFunCodeIsSet(boolean value) {
      if (!value) {
        this.funCode = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new HashMap<String,String>();
      }
      this.paramMap.put(key, val);
    }

    public Map<String,String> getParamMap() {
      return this.paramMap;
    }

    public funCallMember_args setParamMap(Map<String,String> paramMap) {
      this.paramMap = paramMap;
      return this;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALL_TIME:
        if (value == null) {
          unsetCallTime();
        } else {
          setCallTime((Long)value);
        }
        break;

      case FUN_CODE:
        if (value == null) {
          unsetFunCode();
        } else {
          setFunCode((String)value);
        }
        break;

      case PARAM_MAP:
        if (value == null) {
          unsetParamMap();
        } else {
          setParamMap((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALL_TIME:
        return Long.valueOf(getCallTime());

      case FUN_CODE:
        return getFunCode();

      case PARAM_MAP:
        return getParamMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALL_TIME:
        return isSetCallTime();
      case FUN_CODE:
        return isSetFunCode();
      case PARAM_MAP:
        return isSetParamMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallMember_args)
        return this.equals((funCallMember_args)that);
      return false;
    }

    public boolean equals(funCallMember_args that) {
      if (that == null)
        return false;

      boolean this_present_callTime = true;
      boolean that_present_callTime = true;
      if (this_present_callTime || that_present_callTime) {
        if (!(this_present_callTime && that_present_callTime))
          return false;
        if (this.callTime != that.callTime)
          return false;
      }

      boolean this_present_funCode = true && this.isSetFunCode();
      boolean that_present_funCode = true && that.isSetFunCode();
      if (this_present_funCode || that_present_funCode) {
        if (!(this_present_funCode && that_present_funCode))
          return false;
        if (!this.funCode.equals(that.funCode))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_callTime = true;
      list.add(present_callTime);
      if (present_callTime)
        list.add(callTime);

      boolean present_funCode = true && (isSetFunCode());
      list.add(present_funCode);
      if (present_funCode)
        list.add(funCode);

      boolean present_paramMap = true && (isSetParamMap());
      list.add(present_paramMap);
      if (present_paramMap)
        list.add(paramMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCallTime()).compareTo(other.isSetCallTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callTime, other.callTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFunCode()).compareTo(other.isSetFunCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funCode, other.funCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParamMap()).compareTo(other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallMember_args(");
      boolean first = true;

      sb.append("callTime:");
      sb.append(this.callTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("funCode:");
      if (this.funCode == null) {
        sb.append("null");
      } else {
        sb.append(this.funCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallMember_argsStandardSchemeFactory implements SchemeFactory {
      public funCallMember_argsStandardScheme getScheme() {
        return new funCallMember_argsStandardScheme();
      }
    }

    private static class funCallMember_argsStandardScheme extends StandardScheme<funCallMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALL_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.callTime = iprot.readI64();
                struct.setCallTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FUN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.funCode = iprot.readString();
                struct.setFunCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                  struct.paramMap = new HashMap<String,String>(2*_map54.size);
                  String _key55;
                  String _val56;
                  for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                  {
                    _key55 = iprot.readString();
                    _val56 = iprot.readString();
                    struct.paramMap.put(_key55, _val56);
                  }
                  iprot.readMapEnd();
                }
                struct.setParamMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CALL_TIME_FIELD_DESC);
        oprot.writeI64(struct.callTime);
        oprot.writeFieldEnd();
        if (struct.funCode != null) {
          oprot.writeFieldBegin(FUN_CODE_FIELD_DESC);
          oprot.writeString(struct.funCode);
          oprot.writeFieldEnd();
        }
        if (struct.paramMap != null) {
          oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paramMap.size()));
            for (Map.Entry<String, String> _iter58 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallMember_argsTupleSchemeFactory implements SchemeFactory {
      public funCallMember_argsTupleScheme getScheme() {
        return new funCallMember_argsTupleScheme();
      }
    }

    private static class funCallMember_argsTupleScheme extends TupleScheme<funCallMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCallTime()) {
          optionals.set(0);
        }
        if (struct.isSetFunCode()) {
          optionals.set(1);
        }
        if (struct.isSetParamMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCallTime()) {
          oprot.writeI64(struct.callTime);
        }
        if (struct.isSetFunCode()) {
          oprot.writeString(struct.funCode);
        }
        if (struct.isSetParamMap()) {
          {
            oprot.writeI32(struct.paramMap.size());
            for (Map.Entry<String, String> _iter59 : struct.paramMap.entrySet())
            {
              oprot.writeString(_iter59.getKey());
              oprot.writeString(_iter59.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallMember_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.callTime = iprot.readI64();
          struct.setCallTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.funCode = iprot.readString();
          struct.setFunCodeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.paramMap = new HashMap<String,String>(2*_map60.size);
            String _key61;
            String _val62;
            for (int _i63 = 0; _i63 < _map60.size; ++_i63)
            {
              _key61 = iprot.readString();
              _val62 = iprot.readString();
              struct.paramMap.put(_key61, _val62);
            }
          }
          struct.setParamMapIsSet(true);
        }
      }
    }

  }

  public static class funCallMember_result implements org.apache.thrift.TBase<funCallMember_result, funCallMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<funCallMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("funCallMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new funCallMember_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new funCallMember_resultTupleSchemeFactory());
    }

    public List<Member> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Member.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(funCallMember_result.class, metaDataMap);
    }

    public funCallMember_result() {
    }

    public funCallMember_result(
      List<Member> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public funCallMember_result(funCallMember_result other) {
      if (other.isSetSuccess()) {
        List<Member> __this__success = new ArrayList<Member>(other.success.size());
        for (Member other_element : other.success) {
          __this__success.add(new Member(other_element));
        }
        this.success = __this__success;
      }
    }

    public funCallMember_result deepCopy() {
      return new funCallMember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Member> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Member elem) {
      if (this.success == null) {
        this.success = new ArrayList<Member>();
      }
      this.success.add(elem);
    }

    public List<Member> getSuccess() {
      return this.success;
    }

    public funCallMember_result setSuccess(List<Member> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Member>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof funCallMember_result)
        return this.equals((funCallMember_result)that);
      return false;
    }

    public boolean equals(funCallMember_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(funCallMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("funCallMember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class funCallMember_resultStandardSchemeFactory implements SchemeFactory {
      public funCallMember_resultStandardScheme getScheme() {
        return new funCallMember_resultStandardScheme();
      }
    }

    private static class funCallMember_resultStandardScheme extends StandardScheme<funCallMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, funCallMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<Member>(_list64.size);
                  Member _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new Member();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, funCallMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Member _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class funCallMember_resultTupleSchemeFactory implements SchemeFactory {
      public funCallMember_resultTupleScheme getScheme() {
        return new funCallMember_resultTupleScheme();
      }
    }

    private static class funCallMember_resultTupleScheme extends TupleScheme<funCallMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, funCallMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Member _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, funCallMember_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Member>(_list69.size);
            Member _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new Member();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
